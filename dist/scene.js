// Generated by CoffeeScript 1.7.1
(function() {
  var $$, Builder, View, ViewBuilder, exports, snake,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  snake = function(s) {
    return s.replace(/[A-Z]/g, function(x) {
      return "_" + (x.toLowerCase());
    });
  };

  Builder = (function() {
    var events, name, tags, _fn, _i, _len;

    events = "blur change click dblclick error focus input keydown keypress keyup load mousedown mousemove mouseout mouseover mouseup resize scroll select submit unload".split(" ");

    tags = "a abbr address area article aside audio b base bdi bdo blockquote br button canvas caption cite code col colgroup command datalist dd del details dfn dialog div dl dt em embed fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 head header hr i iframe img input ins kbd keygen label legend li link main map mark menu meta meter nav noscript object ol optgroup option output p param pre progress q rp rt ruby s samp script section select small source span strong style sub summary sup table tbody td textarea tfoot th thead time title tr track u ul var video wbr".split(" ");

    function Builder() {
      this.context = [this.base = document.createDocumentFragment()];
    }

    Builder.prototype.tag = function() {
      var contents, el, item, k, name, v, _i, _len;
      name = arguments[0], contents = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      el = document.createElement(name);
      for (_i = 0, _len = contents.length; _i < _len; _i++) {
        item = contents[_i];
        switch (typeof item) {
          case "function":
            this.context.push(el);
            item();
            this.context.pop();
            break;
          case "object":
            for (k in item) {
              v = item[k];
              this.key(el, k, v);
            }
            break;
          default:
            el.appendChild(document.createTextNode("" + item));
        }
      }
      return this.add(el);
    };

    Builder.prototype.text = function(string) {
      return this.add(document.createTextNode(string));
    };

    Builder.prototype.html = function(html) {
      var child, el, _results;
      el = document.createElement("div");
      el.innerHTML = html;
      _results = [];
      while (child = el.firstChild) {
        _results.push(this.add(child));
      }
      return _results;
    };

    Builder.prototype.add = function(el) {
      return this.context[this.context.length - 1].appendChild(el);
    };

    Builder.prototype.key = function(el, k, v) {
      if (-1 === events.indexOf(k)) {
        return el.setAttribute(snake(k), v);
      } else {
        return this.event(el, k, v);
      }
    };

    Builder.prototype.event = function(el, k, v) {
      return el.addEventListener(k, v != null ? v : function() {});
    };

    _fn = function(name) {
      return Builder.prototype[name] = function() {
        var contents;
        contents = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return this.tag.apply(this, [name].concat(__slice.call(contents)));
      };
    };
    for (_i = 0, _len = tags.length; _i < _len; _i++) {
      name = tags[_i];
      _fn(name);
    }

    return Builder;

  })();

  $$ = function(f) {
    var b;
    b = new Builder;
    f.call(b);
    return b.base;
  };

  ViewBuilder = (function(_super) {
    __extends(ViewBuilder, _super);

    function ViewBuilder(view) {
      this.view = view;
      ViewBuilder.__super__.constructor.apply(this, arguments);
    }

    ViewBuilder.prototype.key = function(el, k, v) {
      if (k === "outlet") {
        return this.view[v] = el;
      } else {
        return ViewBuilder.__super__.key.apply(this, arguments);
      }
    };

    ViewBuilder.prototype.event = function(el, k, v) {
      if (typeof v === "string") {
        v = this.view[v];
      }
      return ViewBuilder.__super__.event.call(this, el, k, v != null ? v.bind(this.view) : void 0);
    };

    ViewBuilder.prototype.subview = function(name, sv) {
      this.view[name] = sv;
      this.view.subviews.push(sv);
      sv.parent = this.view;
      return this.add(sv.base);
    };

    return ViewBuilder;

  })(Builder);

  View = (function() {
    function View() {
      var args, b, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.subviews = [];
      b = new ViewBuilder(this);
      (_ref = this.constructor.content).call.apply(_ref, [b].concat(__slice.call(args)));
      this.base = b.base.firstChild;
      if (typeof this.initialize === "function") {
        this.initialize.apply(this, args);
      }
    }

    View.content = function() {
      return this.div();
    };

    View.prototype.inDocument = false;

    View.prototype.add = function(sv, mount, before) {
      if (mount == null) {
        mount = this.base;
      }
      if (before == null) {
        before = null;
      }
      sv.removeFromParent();
      if (before) {
        mount.insertBefore(sv.base, before);
      } else {
        mount.appendChild(sv.base);
      }
      this.subviews.push(sv);
      sv.parent = this;
      sv.tryDocument();
      return this;
    };

    View.prototype.replaceWith = function(sv) {
      sv.removeFromParent();
      if (this.parent) {
        this.parent.subviews.push(sv);
        sv.parent = this.parent;
      }
      this.tryExit();
      this.base.parentNode.replaceChild(sv.base, this.base);
      this.removeFromParent();
      return sv.tryDocument();
    };

    View.prototype.embed = function(mount) {
      mount.appendChild(this.base);
      this.tryDocument();
      return this;
    };

    View.prototype.remove = function() {
      var node;
      this.tryExit();
      this.removeFromParent();
      if (node = this.base.parentNode) {
        node.removeChild(this.base);
      }
      return this;
    };

    View.prototype.removeFromParent = function() {
      var i, views;
      if (!this.parent) {
        return;
      }
      views = this.parent.subviews;
      i = views.indexOf(this);
      if (i !== -1) {
        views.splice(i, 1);
      }
      return this.parent = null;
    };

    View.prototype.tryDocument = function() {
      var p;
      p = this.base;
      while (p) {
        if (p.tagName === "BODY") {
          this.tryEnter();
          return;
        }
        p = p.parentNode;
      }
      return this.tryExit();
    };

    View.prototype.tryEnter = function() {
      var sv, _i, _len, _ref, _results;
      if (this.inDocument) {
        return;
      }
      this.inDocument = true;
      if (typeof this.enter === "function") {
        this.enter();
      }
      _ref = this.subviews;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sv = _ref[_i];
        _results.push(sv.tryEnter());
      }
      return _results;
    };

    View.prototype.tryExit = function() {
      var sv, _i, _len, _ref, _results;
      if (!this.inDocument) {
        return;
      }
      if (typeof this.exit === "function") {
        this.exit();
      }
      this.inDocument = false;
      _ref = this.subviews;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sv = _ref[_i];
        _results.push(sv.tryExit());
      }
      return _results;
    };

    return View;

  })();

  exports = {
    $$: $$,
    View: View,
    Builder: Builder
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = exports;
  } else {
    this.scene = exports;
  }

}).call(this);
